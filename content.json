{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/03/03/hello-world/"},{"title":"파이썬 메모장(파이썬 최적화 문법 및 규칙 리스트)","text":"파이썬 메모장(파이썬 최적화 문법 및 규칙 리스트)클래스(class) 클래스 구조 클래스 변수 __init__ 내장 파이썬 특수 메서드 (__call__, __reper__ 등) 클래스 메서드 정적 메서드 속성 인스턴스 메서드 프라이빗 메서드 @propertry 데코레이터 인스턴스.속성 형식으로 접근하여 값 읽거나 저장할수 있다 class TEST: ... self.num = num @propertry def see(self): return self.num + 1 ---------------------------------------------- >> test = TEST(1) # self.num = 1 >> print(test.see) 2 >> test.see = 20 # 인스턴스.속성 형식으로 접근하여 값 저장 print(test.see) # 인스턴스.속성 형식으로 값을 가져옴 >> 21 superr로 부모 클래스를 초기화하라 ㅇ 모듈 선언 방식 (from, import) 모듈 이름을 짧게 유지한다. 밑줄을 사용하지 않거나 최소한으로 유지한다 또한 점이나 대문자, 여러 특수 문자를 가진 이름은 피한다 # bad import user_test_play import add_test_name from user import test_play # good import play import name from user.test import play # bad import user.test.play import USER # good import user_play import users # bad from user import * test = add_test(1) #good from user import add_test test = add_test(1) # bad from user import bar # good from . import bar enumerate() 함수 해당 리스트 테이터들을 인덱스 및 데이터 값을 출력 할때 사용한다 list_ = [\"1\",\"2\",\"3\"] for index, value in enumerate(list_): print(index) print(value) >>> 0 \"1\" 1 \"2\" 2 \"3\" 데이터 언패킹 튜플 및 군집 자료형으로 감싸진 데이터들을 가져올때 사용한다 item = (\"1\",\"2\") nubr1 , nubr2 = item >>> nubr1 = \"1\" nubr2 = \"2\" list comprehension 문법 배열안애 for 문으로 값을 넘기거나 계산식을 사용할떄 한줄로 변경하여 가독성 및 속도개선 목적으로 사용하는 문법 # None list comprehension text = [] for i in A: if i % 2 == 0: text.append(i) # list comprehension text = [i for i in A if i % 2 == 0] 리스트 슬라이싱 리스트의 맨 앞 부터 슬라이싱할 때는 시각적 잡음(오류)을 없애기 위해 0을 생략해야한다 또한 끝까리 슬라이싱 할경우에는 인덱스를 적지 말아야 한다 >> assert a[0:5] == a[:5] >> assert a[5:len(a)] == a[5:] None을 반환하기보다는 예외를 발생시키자 참고 자료 클린 파이썬 (효과적인 파이썬 코딩 기법) 파이썬 코딩의 기술","link":"/2022/04/04/%EA%B7%9C%EC%B9%99/"}],"tags":[{"name":"파이썬","slug":"파이썬","link":"/tags/%ED%8C%8C%EC%9D%B4%EC%8D%AC/"}],"categories":[]}